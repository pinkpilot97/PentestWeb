import {createContext, useState, useContext, useEffect} from 'react'
import { createCustomerReq, getCustomers, deleteCustomer, getCustomer, updateCustomer,exportDataCustomer } from '../api/customer'
import Cookies from 'js-cookie'

export const CustomerContext = createContext()

export const useCutomer = () => {
    const context = useContext(CustomerContext)
    if (!context) {
        throw new Error("useCutomer must be used within an createContext")
    }
    return context;
}

export const CustomerProvider = ({children}) => {
    const [customer, setCustomer] = useState(null)
    const [reqError, setReqError] = useState([])

    const sendRequest = async (data) => {
        try {
            const res = await createCustomerReq(data)
            setCustomer(res.data)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setReqError(error.response.data)
            }
            console.log(error.response.data)
            setReqError([error.response.data.message])
            
        }
        
    };

    const deleteCustomerReq = async (id) => {
        try {
            const res = await deleteCustomer(id)
            if (res.status === 204){
                alert("Done")
            }else{
                alert("Something went wrong")
            }
        } catch (error) {
            alert("Something went wrong")
            
        }
        
    };

    const getCustomersReq = async () => {
        try {
            const res = await getCustomers()
            setCustomer(res.data)
        } catch (error) {
            console.log(error)
            
        }
        
    };

    const getCustomerReq = async (data) => {
        try {
            const res = await getCustomer(data)
            return res.data
        } catch (error) {
            console.log(error)
            
        }
        
    };

    const updateCustomerReq = async (id,data) => {
        try {
            const res = await updateCustomer(id,data)
            return res.data
        } catch (error) {
            console.log(error)
            
        }
        
    };

    const exportData = async (data) => {
        try {
            const res = await exportDataCustomer(data).then((response) => {
                const blob = new Blob([response.data], { type: 'application/pdf' });
                const url = window.URL.createObjectURL(blob);
            
                const a = document.createElement('a');
                a.href = url;
                a.download = 'data.pdf';
                document.body.appendChild(a);
                a.click();
            
                window.URL.revokeObjectURL(url);
              })
              .catch((error) => {
                console.error('Error while downloading pdf:', error);
              });
            return res.data
        } catch (error) {
            console.log(error)
            
        }
        
    };


    useEffect(() => {
        if(reqError.length > 0){
            const timer = setTimeout(() => {
                setReqError([])
            },3000)
            return () => clearTimeout(timer)
        }
    })

   

    return(
        <CustomerContext.Provider
            value={{
                sendRequest,
                getCustomersReq,
                deleteCustomerReq,
                getCustomerReq,
                updateCustomerReq,
                exportData,
                customer,
                reqError
            }}
        >
            {children}
        </CustomerContext.Provider>
    )
    

}