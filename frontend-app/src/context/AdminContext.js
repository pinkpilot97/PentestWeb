import {createContext, useState, useContext, useEffect} from 'react'
import { createUserReq, getUsers, deleteUser, getUser, updateUser } from '../api/admin'
import Cookies from 'js-cookie'

export const AdminContext = createContext()

export const useAdmin = () => {
    const context = useContext(AdminContext)
    if (!context) {
        throw new Error("useAdmin must be used within an createContext")
    }
    return context;
}

export const AdminProvider = ({children}) => {
    const [users, setUsers] = useState(null)
    const [reqError, setReqError] = useState([])

    const sendRequest = async (data) => {
        try {
            const res = await createUserReq(data)
            console.log(res.data)
            setUsers(res.data)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setReqError(error.response.data)
            }
            console.log(error.response.data)
            setReqError([error.response.data.message])
            
        }
        
    };

    const getUsersReq = async () => {
        try {
            const res = await getUsers()
            setUsers(res.data)
        } catch (error) {
            console.log(error)
            
        }
        
    };

    const getUserReq = async (data) => {
        try {
            const res = await getUser(data)
            return res.data
        } catch (error) {
            console.log(error)
            
        }
        
    };

    const updateUserReq = async (id,data) => {
        try {
            const res = await updateUser(id,data)
            return res.data
        } catch (error) {
            console.log(error)
            
        }
        
    };

    const deleteUserReq = async (id) => {
        try {
            const res = await deleteUser(id)
            if (res.status === 204){
                alert("Done")
            }
            else {
                alert("Something went wrong")
            }
            
        } catch (error) {
            alert("Something went wrong")
            
        }
        
    };


    useEffect(() => {
        if(reqError.length > 0){
            const timer = setTimeout(() => {
                setReqError([])
            },3000)
            return () => clearTimeout(timer)
        }
    })

   

    return(
        <AdminContext.Provider
            value={{
                sendRequest,
                getUsersReq,
                deleteUserReq,
                getUserReq,
                updateUserReq,
                users,
                reqError
            }}
        >
            {children}
        </AdminContext.Provider>
    )
    

}