import {createContext, useState, useContext, useEffect} from 'react'
import { loginReq, profileReq, passwordReq, sendEmail, resetPassw } from '../api/auth'
import Cookies from 'js-cookie'

export const AuthContext = createContext()

export const useAuth = () => {
    const context = useContext(AuthContext)
    if (!context) {
        throw new Error("useAuth must be used within an authprovider")
    }
    return context;
}

export const AuthProvider = ({children}) => {
    const [user, setUser] = useState(null)
    const [password, setPassword] = useState(null)
    const [isAuth, setIsAuth] = useState(false)
    const [authError, setAuthError] = useState([])
    const [loading, setLoading] = useState(true)

    const login = async (user) => {
        try {
            const res = await loginReq(user)
            console.log(res.data)
            setUser(res.data)
            setIsAuth(true)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setAuthError(error.response.data)
            }
            console.log(error.response.data)
            setAuthError([error.response.data.message])
            
        }
        
    };

    const changeDataUser = async (id,data) => {
        try {
            const res = await passwordReq(id, data)
            console.log(res.data)
            setPassword(res.data)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setAuthError(error.response.data)
            }
            console.log(error.response.data)
            setAuthError([error.response.data.message])
            
        }
        
    };

    const getDataProfile = async (data) => {
        try {
            const res = await profileReq()
            setUser(res.data)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setAuthError(error.response.data)
            }
            console.log(error.response.data)
            setAuthError([error.response.data.message])
            
        }
        
    };

    const passwordResetEmail = async (data) => {
        try {
            const res = await sendEmail(data)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setAuthError(error.response.data)
            }
            console.log(error.response.data)
            setAuthError([error.response.data.message])
            
        }
        
    };

    const passwordReset = async (data) => {
        try {
            const res = await resetPassw(data)
        } catch (error) {
            if(Array.isArray(error.response.data)){
                return setAuthError(error.response.data)
            }
            console.log(error.response.data)
            setAuthError([error.response.data.message])
            
        }
        
    };

    const logout = () => {
        Cookies.remove("token")
        setIsAuth(false)
        setUser(null)        
    };

    useEffect(() => {
        if(authError.length > 0){
            const timer = setTimeout(() => {
                setAuthError([])
            },3000)
            return () => clearTimeout(timer)
        }
    })

    useEffect(() => {
        async function checkLogin() {
            const cookies = Cookies.get();
            if (!cookies.token){
                setIsAuth(false)
                setLoading(false)
                console.log("hola")
                setUser(null)
                return 
            }
            try {
                const res = await profileReq(cookies.token)
                if(!res.data){
                    setIsAuth(false)
                    setLoading(false)
                    return
                }

                setIsAuth(true)
                setUser(res.data)
                setLoading(false)
                console.log(res.data)
                console.log(isAuth)
            } catch (error) {
                console.log("wrong")
                setIsAuth(false)
                setUser(null)
                setLoading(false)                
            }
        }
        checkLogin()
    }, [])

    return(
        <AuthContext.Provider
            value={{
                login,
                logout,
                user,
                isAuth,
                loading,
                changeDataUser,
                getDataProfile,
                passwordResetEmail,
                passwordReset,
                password,
                authError
            }}
        >
            {children}
        </AuthContext.Provider>
    )
    

}