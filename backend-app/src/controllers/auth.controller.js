import { createToken } from "../libs/token.js";
import Users from "../models/user.model.js";
import Token from "../models/token.model.js";
import bcrypt from 'bcryptjs'
import crypto from 'crypto'

export const login = async (req, res) => {
    const {email,password} = req.body
    try {
        const userFound = await Users.findOne({email});
        if(!userFound){
            return res.status(400).json({message:"Incorrect user"});
        }
        const isMatch = await bcrypt.compare(password, userFound.password);
       
        if (!isMatch){
            return res.status(400).json({message:"Incorrect password"})
        }
         

        const token = await createToken({id: userFound._id,role: userFound.role});
        res.cookie("token",token);
        res.json({
            id: userFound._id,
            role: userFound.role,
            email: userFound.email
        })
    } catch (error) {
        res.status(500).json({message: 'Internal server error'});
    }
}

export const profile = async (req, res) => {
    const userId = req.user.id
    try {
        const userFound = await Users.findById(userId);
        if(!userFound){
            return res.status(400).json({message:"User not found"});
        }
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Expires', '0');
        res.json({
            id: userFound._id,
            username: userFound.username,
            role: userFound.role,
            email: userFound.email
        })
    } catch (error) {
        res.status(500).json({message: 'Internal server error'});
    }
}


export const changePass = async (req, res) => {
    const password = req.body.password
    const userId = req.params.id
    try {
        const user = await Users.findById(userId);
        if (!user) {
          return res.status(404).json({ message: 'User not found' });
        }
        const hash = await bcrypt.hash(password,10)
        user.password = hash;
    
        await user.save();
    
        res.json({ message: 'Sucess' });
      } catch (error) {
        console.error('Error', error);
        res.status(500).json({ message: 'Internal server error' });
      }
}

export const gentTokenReset = async (req, res) => {
    const {email} = req.body
    const userFound = await Users.findOne({email});
    if(!userFound){
        return res.status(400).json({message:"Email does not exist"});
    }

    let token = await Token.findOne({ userId: userFound._id })
    if (!token) {
        token = await new Token({
            userId: userFound._id,
            token: crypto.randomBytes(16).toString("hex"),
        }).save();
    }

    const link = `/password-reset/${userFound._id}/${token.token}`;
    console.log(link)
    res.send("password reset link sent to your email account");
}

export const reset = async (req, res) => {
    const {userId,tokenReq,password} = req.body
    try {

        const user = await Users.findById(userId);
        if (!user) return res.status(400).json({ message:"Invalid link or expired"});
        console.log(tokenReq)
        const token = await Token.findOne({
            userId: user._id,
            token: req.body.tokenReq
        });
        console.log(token)
        if (!token) return res.status(400).json({ message: "Invalid link or expired"});
        
        const hash = await bcrypt.hash(password,10)
        user.password = hash;
        await user.save();
        await Token.findByIdAndDelete(token._id);

        res.status(200).json({ message: "password reset sucessfully."});
    } catch (error) {
        res.status(500).json({ message: "Internal server error"});
        console.log(error);
    }
}

export const verify = async (req, res) => {
    const {token} = req.cookies
    try {
        if(!token){
            res.status(401).json({message: "Unauthorized"})
        }
       
    } catch (error) {
    }
}