import { createToken } from "../libs/token.js";
import Users from "../models/user.model.js";
import Token from "../models/token.model.js";
import bcrypt from 'bcryptjs'
import crypto from 'crypto'

export const createUser = async (req, res) => {
    const {username,email,password,role} = req.body
    try {
        const hash = await bcrypt.hash(password,10)
        const newUser = new Users({
           username,
           email,
           password: hash,
           role
        })
        const saveUser = await newUser.save()
        res.json({message:"User created"})
    } catch (error) {
        res.status(500).json({message: 'Internal server error'});
    }
}

export const updateUser = async (req, res) => {
    const userId = req.params.id
    const updateData = req.body;

    try {
        const user = await Users.findById(userId);

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        if (updateData.password) {
            const hashedPassword = await bcrypt.hash(updateData.password, 10);
            updateData.password = hashedPassword;
        }

        const updatedUser = await Users.findByIdAndUpdate(userId, updateData, { new: true });

        res.status(200).json({ message: 'User updated' });
    } catch (error) {
        res.status(500).json({message: 'Internal server error' });
    }
}

export const deleteUser = async (req, res) => {
    const userId = req.params.id
    try {
        const user = await Users.findByIdAndDelete(userId)
       if (!user){
           res.status(404).json({ message: 'User not found' });
       }
       res.status(204).json({ message: 'ok' })
    } catch (error) {
        res.status(500).json({message: 'Internal server error' });
    }
}

export const getUser = async (req, res) => {
    const {query} = req.query
    try {
        
        if (query == null || !query){
            const users = await Users.find().select('email username role')
            console.log(users)
            res.json(users)
        }
        else{
            const users = await Users.findById(query)
            console.log(users)
            res.json(users)
        //const users = await Users.find({$or: [{ username: query },{ email: query }]});
        //console.log(users)
        //res.json(users);
        }
        

    } catch (error) {
        return res.status(404).json({ message: error })
    }
    

    
}


export const getUserv = async (req, res) => {
    const {sort,offset,count, fields, query} = req.body
    try {
        let consulta = { $where: `this.email == '${query}'` }
        const usuarios = await Users.find(consulta).select('email username');
        console.log(usuarios)
      
        res.json(usuarios);
        
    } catch (error) {
        return res.status(404).json({ message: error.stack })
    }
        // Request using MongoDB $where
        

    
    

    
}